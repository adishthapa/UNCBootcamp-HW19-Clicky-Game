{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["styles","bounce","animation","animationName","Radium","keyframes","flashRed","color","flash","flashGreen1","flashGreen2","shake","App","state","score","topScore","colors","guessedColors","message","messageColor","containerStyle","componentDidMount","localStorage","getItem","setState","Number","e","shuffleArrays","arr","i","length","j","Math","floor","random","temp","shuffleColors","handleClick","event","preventDefault","name","target","value","includes","style","concat","setItem","className","id","this","map","key","type","src","image","alt","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38eba5b8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { bounce, flash, shake } from \"react-animations\";\nimport Radium, { StyleRoot } from \"radium\";\nimport \"./App.css\";\nimport colors from \"./colors.json\";\n\nconst styles = {\n  bounce: {\n    animation: \"x 1s\",\n    animationName: Radium.keyframes(bounce, \"bounce\")\n  },\n  flashRed: {\n    animation: \"x 1s\",\n    color: \"red\",\n    animationName: Radium.keyframes(flash, \"flashRed\")\n  },\n  flashGreen1: {\n    animation: \"x 1s\",\n    color: \"green\",\n    animationName: Radium.keyframes(flash, \"flashGreen1\")\n  },\n  flashGreen2: {\n    animation: \"x 1s\",\n    color: \"green\",\n    animationName: Radium.keyframes(flash, \"flashGreen2\")\n  },\n  shake: {\n    animation: \"x .75s\",\n    animationName: Radium.keyframes(shake, \"shake\")\n  }\n};\n\nclass App extends Component {\n  state = {\n    score: 0,\n    topScore: 0,\n    colors: colors,\n    guessedColors: [],\n    message: <h5>Click an image to begin!</h5>,\n    messageColor: \"\",\n    containerStyle: null\n  };\n\n  componentDidMount = () => {\n    try {\n      if (localStorage.getItem(\"topScore\")) {\n        this.setState({ topScore: Number(localStorage.getItem(\"topScore\")) });\n      }\n      return true;\n    } catch (e) {\n      this.setState({ topScore: 0 });\n      return false;\n    }\n  };\n\n  shuffleArrays = arr => {\n    for (let i = arr.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    return arr;\n  };\n\n  shuffleColors = () => {\n    this.setState({ colors: this.shuffleArrays(this.state.colors) });\n  };\n\n  handleClick = event => {\n    event.preventDefault();\n    const name = event.target.value;\n    if (this.state.guessedColors.includes(name)) {\n      this.setState({\n        score: 0,\n        guessedColors: [],\n        message: <h5 style={styles.flashRed}>You guessed incorrectly!</h5>,\n        containerStyle: styles.shake\n      });\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        guessedColors: this.state.guessedColors.concat(name),\n        containerStyle: null\n      });\n      this.shuffleColors();\n      if (this.state.messageColor === \"green1\") {\n        this.setState({\n          message: <h5 style={styles.flashGreen2}>You guessed correctly!</h5>,\n          messageColor: \"green2\"\n        });\n      } else {\n        this.setState({\n          message: <h5 style={styles.flashGreen1}>You guessed correctly!</h5>,\n          messageColor: \"green1\"\n        });\n      }\n      if (this.state.score >= this.state.topScore) {\n        this.setState({\n          topScore: this.state.topScore + 1\n        });\n        try {\n          localStorage.setItem(\"topScore\", this.state.topScore + 1);\n          return true;\n        } catch (e) {\n          return false;\n        }\n      }\n    }\n  };\n\n  render() {\n    return (\n      <StyleRoot>\n        <div className=\"container-fluid\">\n          <div className=\"row text-center pt-4 pb-2\" id=\"directions\">\n            <div className=\"col-12\">\n              <h1>Clicky Game!</h1>\n              <p className=\"lead\">\n                Click on a color to earn points, but don't click on any more\n                than once!\n              </p>\n            </div>\n          </div>\n          <div className=\"row text-center py-3\" id=\"scores\">\n            <div className=\"col-2\"></div>\n            <div className=\"col-3\">\n              <h4>Score: {this.state.score}</h4>\n            </div>\n            <div className=\"col-2\"></div>\n            <div className=\"col-3\">\n              <h4>Top Score: {this.state.topScore}</h4>\n            </div>\n            <div className=\"col-2\"></div>\n            <div className=\"col-12\">{this.state.message}</div>\n          </div>\n          <div className=\"row\" style={this.state.containerStyle}>\n            {this.state.colors.map(color => {\n              return (\n                <div className=\"col-4 col-md-3 text-center\" key={color.name}>\n                  <input\n                    type=\"image\"\n                    src={color.image}\n                    alt={color.name}\n                    value={color.name}\n                    className=\"img-fluid colorImg\"\n                    onClick={this.handleClick}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </StyleRoot>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}